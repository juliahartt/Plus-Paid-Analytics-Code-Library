WITH base AS (
  SELECT
    DATE_TRUNC(DATE(dlv.date), WEEK(MONDAY)) as week_starting_monday,
    campaign_region,
    spend_marketing_channel,
    spend_marketing_subchannel,
    case when spend_is_branded is true then 'Branded'
          when spend_is_branded is false then 'Non-Branded'  else 'Unknown' end as spend_is_branded, 
    SUM(spend_usd) as Spend,
    SUM(leads_attributed) as Leads,
    SUM(adjusted_dollar_lead_value_usd) as DLV
  FROM `shopify-dw.mart_commercial_optimization.dollar_lead_value_payback` dlv
  WHERE DATE(dlv.date) >= '2025-01-01'
    AND campaign_region in ('AMER','EMEA','APAC')
  GROUP BY ALL
),
mqls AS (
  SELECT 
    DATE_TRUNC(DATE(l.new_sales_ready_at), WEEK(MONDAY)) as week_starting_monday,
    COALESCE(TRIM(IF(ARRAY_LENGTH(SPLIT(lv.spend_campaign_name,'|')) = 14, SPLIT(lv.spend_campaign_name,'|'), null)[SAFE_OFFSET(5)]),"Unknown Region") AS region,
    lv.marketing_channel,
    lv.marketing_subchannel,
    SUM(CASE WHEN DATE(l.new_sales_ready_at) IS NOT NULL THEN 1 ELSE 0 END) AS MQLs
 FROM `shopify-dw.mart_commercial_optimization.dollar_lead_value_attribution` lv
  JOIN `shopify-dw.sales.sales_leads` l ON lv.lead_id = l.lead_id
  JOIN `shopify-dw.raw_salesforce_banff.lead` bl ON lv.lead_id = bl.id
  WHERE lv.is_last_touchpoint = True 
    AND l.lead_source_original_category="Marketing"
    AND lv.product IN ('Plus', 'Commerce Components','B2B')
    AND DATE(l.new_sales_ready_at) >= '2025-01-01'
    AND NOT (
  l.lead_source_original = 'Content Syndication'
  OR (
    l.lead_source_original = 'Content'
    AND (
      LOWER(bl.UTM_Source__c) LIKE '%madisonlogic%'
      OR LOWER(bl.UTM_Source__c) LIKE '%techtarget%'
      OR LOWER(bl.UTM_Source__c) LIKE '%integrate%'
    )
    )
      )
  GROUP BY all
),
combined as(
  SELECT
  b.week_starting_monday,
  b.campaign_region,
  b.spend_marketing_channel,
  b.spend_marketing_subchannel,
  b.spend_is_branded,
  b.Spend,
  b.Leads,
  b.DLV,
  m.MQLs
FROM base b
LEFT JOIN mqls m
  ON b.week_starting_monday = m.week_starting_monday
  AND b.campaign_region = m.region
  AND b.spend_marketing_channel = m.marketing_channel
  AND b.spend_marketing_subchannel = m.marketing_subchannel
ORDER BY
  week_starting_monday DESC,
  region,
  marketing_channel,
  marketing_subchannel,
  spend_is_branded
),
all_levels AS (
  -- Global
  SELECT
    week_starting_monday,
    NULL as campaign_region,
    NULL as spend_marketing_channel,
    NULL as spend_marketing_subchannel,
    NULL as spend_is_branded,

    'Global' as group_level,
    SUM(Spend) as Spend,
    SUM(Leads) as Leads,
    SUM(DLV) as DLV,
    SUM(MQLs) as MQLs
  FROM combined GROUP BY week_starting_monday

  UNION ALL
  -- Region
  SELECT
    week_starting_monday,
    campaign_region,
    NULL,
    NULL,
    NULL,
    
    'Region',
    SUM(Spend),
    SUM(Leads),
    SUM(DLV),
    SUM(MQLs)
  FROM combined GROUP BY week_starting_monday, campaign_region

  UNION ALL
  -- Channel
  SELECT
    week_starting_monday,
    campaign_region,
    spend_marketing_channel,
    NULL,
    NULL,
    
    'Channel',
    SUM(Spend),
    SUM(Leads),
    SUM(DLV),
    SUM(MQLs) 
  FROM combined GROUP BY week_starting_monday, campaign_region, spend_marketing_channel

  UNION ALL
  -- Subchannel
  SELECT
    week_starting_monday,
    campaign_region,
    spend_marketing_channel,
    spend_marketing_subchannel,
    NULL,
    
    'Subchannel',
    SUM(Spend),
    SUM(Leads),
    SUM(DLV),
    SUM(MQLs) 
  FROM combined GROUP BY week_starting_monday, campaign_region, spend_marketing_channel, spend_marketing_subchannel



  UNION ALL
  -- Spend_is_branded
  SELECT
    week_starting_monday,
    campaign_region,
    spend_marketing_channel,
    spend_marketing_subchannel,
    spend_is_branded,
    'Branded' as group_level,
    SUM(Spend),
    SUM(Leads),
    SUM(DLV),
    SUM(MQLs) 
  FROM combined
  GROUP BY week_starting_monday, campaign_region, spend_marketing_channel, spend_marketing_subchannel, spend_is_branded
),

lagged AS (
  SELECT
    *,
    LAG(Spend) OVER (PARTITION BY group_level, campaign_region, spend_marketing_channel, spend_marketing_subchannel,spend_is_branded ORDER BY week_starting_monday) AS Prev_Spend,
    LAG(Leads) OVER (PARTITION BY group_level, campaign_region, spend_marketing_channel, spend_marketing_subchannel, spend_is_branded ORDER BY week_starting_monday) AS Prev_Leads,
    LAG(DLV) OVER (PARTITION BY group_level, campaign_region, spend_marketing_channel, spend_marketing_subchannel, spend_is_branded ORDER BY week_starting_monday) AS Prev_DLV,
    LAG(MQLs) OVER (PARTITION BY group_level, campaign_region, spend_marketing_channel, spend_marketing_subchannel, spend_is_branded ORDER BY week_starting_monday) AS Prev_MQLs
  FROM all_levels
   where week_starting_monday  < DATE_TRUNC(CURRENT_DATE(), WEEK(MONDAY))
),
recent_weeks AS (
  SELECT week_starting_monday FROM (
    SELECT week_starting_monday
    FROM lagged
    WHERE week_starting_monday < DATE_TRUNC(CURRENT_DATE(), WEEK(MONDAY))
    GROUP BY week_starting_monday
    ORDER BY week_starting_monday DESC
    LIMIT 2
  )
),
latest_week AS (
  SELECT MAX(week_starting_monday) AS max_week FROM lagged
  )
SELECT
  week_starting_monday,
  group_level,
  campaign_region,
  spend_marketing_channel,
  spend_marketing_subchannel,

  spend_is_branded,
  'Spend' AS metric,
  1 AS metric_order,
  
  Spend AS Latest_value,
  Prev_Spend as Prev_value,
CASE WHEN week_starting_monday = (SELECT max_week FROM latest_week)
THEN  SAFE_DIVIDE(Spend - Prev_Spend, Prev_Spend)  ELSE NULL END AS wow_pct
FROM lagged

UNION ALL

SELECT
  week_starting_monday,
  group_level,
  campaign_region,
  spend_marketing_channel,
  spend_marketing_subchannel,
  
  spend_is_branded,
  'Leads' AS metric,
  2 AS metric_order,
  Leads AS Latest_value,
  Prev_Leads as Prev_value,
CASE WHEN week_starting_monday = (SELECT max_week FROM latest_week)
THEN  SAFE_DIVIDE(Leads - Prev_Leads, Prev_Leads)  ELSE NULL END AS wow_pct
FROM lagged

UNION ALL

SELECT
  week_starting_monday,
  group_level,
  campaign_region,
  spend_marketing_channel,
  spend_marketing_subchannel,
  
  spend_is_branded,
  'DLV' AS metric,
  6 AS metric_order,
  DLV AS Latest_value,
  Prev_DLV as Prev_value,
CASE WHEN week_starting_monday = (SELECT max_week FROM latest_week)
THEN  SAFE_DIVIDE(DLV - Prev_DLV, Prev_DLV) ELSE NULL END AS wow_pct
FROM lagged

UNION ALL

SELECT
  week_starting_monday,
  group_level,
  campaign_region,
  spend_marketing_channel,
  spend_marketing_subchannel,
  
  spend_is_branded,
  'CPL' AS metric,
  4 AS metric_order,
  SAFE_DIVIDE(Spend, Leads) AS Latest_value,
  SAFE_DIVIDE(Prev_Spend, Prev_Leads) AS Prev_value,
CASE WHEN week_starting_monday = (SELECT max_week FROM latest_week)
THEN  SAFE_DIVIDE(SAFE_DIVIDE(Spend, Leads) - SAFE_DIVIDE(Prev_Spend, Prev_Leads), SAFE_DIVIDE(Prev_Spend, Prev_Leads)) ELSE NULL END AS wow_pct
FROM lagged

UNION ALL

SELECT
  week_starting_monday,
  group_level,
  campaign_region,
  spend_marketing_channel,
  spend_marketing_subchannel,
  
  spend_is_branded,
  'DLV/Lead' AS metric,
  7 AS metric_order,
  SAFE_DIVIDE(DLV, Leads) AS Latest_value,
  SAFE_DIVIDE(Prev_DLV, Prev_Leads) AS Prev_value,
CASE WHEN week_starting_monday = (SELECT max_week FROM latest_week)
 THEN SAFE_DIVIDE(SAFE_DIVIDE(DLV, Leads) - SAFE_DIVIDE(Prev_DLV, Prev_Leads), SAFE_DIVIDE(Prev_DLV, Prev_Leads)) ELSE NULL END AS wow_pct
FROM lagged

UNION ALL

SELECT
  week_starting_monday,
  group_level,
  campaign_region,
  spend_marketing_channel,
  spend_marketing_subchannel,
  
  spend_is_branded,
  'MQLs' AS metric,
  3 AS metric_order,
  MQLs AS Latest_value,
  Prev_MQLs as Prev_value,
CASE WHEN week_starting_monday = (SELECT max_week FROM latest_week)
THEN  SAFE_DIVIDE(MQLs - Prev_MQLs, Prev_MQLs) ELSE NULL END AS wow_pct
FROM lagged

UNION ALL

SELECT
  week_starting_monday,
  group_level,
  campaign_region,
  spend_marketing_channel,
  spend_marketing_subchannel,
  
  spend_is_branded,
  'MQL/Lead' AS metric,
  5 AS metric_order,
  SAFE_DIVIDE(MQLs, Leads) AS Latest_value,
  SAFE_DIVIDE(Prev_MQLs, Prev_Leads) AS Prev_value,
CASE WHEN week_starting_monday = (SELECT max_week FROM latest_week)
THEN  SAFE_DIVIDE(SAFE_DIVIDE(MQLs, Leads) - SAFE_DIVIDE(Prev_MQLs, Prev_Leads), SAFE_DIVIDE(Prev_MQLs, Prev_Leads)) ELSE NULL END AS wow_pct
FROM lagged
